{"version":3,"sources":["components/Form.js","components/Result.js","components/App.js","reportWebVitals.js","index.js"],"names":["Form","props","onSubmit","submit","type","placeholder","value","onChange","change","Result","weather","error","city","temp","date","sunrise","sunset","pressure","wind","content","sunriseTime","Date","toLocaleTimeString","sunsetTime","className","APIKey","App","state","handleCityChange","e","setState","target","handleCitySubmit","preventDefault","console","log","API","fetch","then","response","ok","Error","json","data","toLocaleString","prevState","sys","main","speed","catch","this","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.32ac548b.chunk.js","sourcesContent":["import React from 'react';\r\nconst Form = (props) => {\r\n    return ( \r\n        <form onSubmit={props.submit}>\r\n            <input type=\"text\" placeholder=\"Enter city\" value={props.value} onChange={props.change}/>\r\n            <button>Search City</button>\r\n\r\n        </form>\r\n     );\r\n}\r\n \r\nexport default Form;","import React from 'react';\r\nimport './Result.css'\r\n\r\nconst Result = props => {\r\n    const {error, city, temp, date, sunrise, sunset, pressure, wind} = props.weather\r\n\r\n    let content = null\r\n\r\n    if (!error && city) {\r\n\r\n        const sunriseTime = new Date (sunrise * 1000).toLocaleTimeString()\r\n        const sunsetTime = new Date(sunset * 1000).toLocaleTimeString()\r\n        content = (\r\n        <div className=\"container\">\r\n          <div className=\"widget\">\r\n            <div className=\"details\">\r\n                <div className=\"city\">Weather for: {city}</div>\r\n                <div className=\"temperature\">{temp}&#176;C</div>\r\n                <div className=\"summary\">\r\n                    <p className=\"summaryText\">Date and time: {date}</p>\r\n                    <p className=\"sunsetAndSunrise\">\r\n                      Sunrise at: {sunriseTime}<br/>\r\n                      Sunset at: {sunsetTime}\r\n                    </p>\r\n                </div>\r\n                <div className=\"precipitation\">Pressure: {pressure} hPa</div>\r\n                <div className=\"wind\">Wind speed: {wind} m/s</div>\r\n            </div>\r\n        </div>\r\n                {/* <h3>Weather for: <em>{city}</em></h3>\r\n                <h4>Date and time: {date}</h4>\r\n                <h4>Temperature: {temp}&#176;C</h4>\r\n                <h4>Sunrise: {sunriseTime}</h4>\r\n                <h4>Sunset: {sunsetTime}</h4>\r\n                <h4>Pressure: {pressure}hPa</h4>\r\n                <h4>Wind speed: {wind}m/s</h4> */}\r\n      </div>\r\n\r\n\r\n        )\r\n    }\r\n\r\n    return ( \r\n        <div className=\"result\">\r\n            {error ? <p className=\"error\">There is no {city} in our base!</p> : content}\r\n        </div>\r\n     );\r\n}\r\n \r\nexport default Result;","import React, { Component } from 'react';\nimport Form from './Form';\nimport Result from './Result';\nimport './App.css';\nconst APIKey = 'c9af263f312b307e6997b2985525fe7a'\n\nclass App extends Component {\n  state = {\n    value: \"\",\n    date: \"\",\n    sunrise: \"\",\n    sunset: \"\",\n    temp: \"\",\n    pressure: \"\",\n    wind: \"\",\n    error: false,\n  }\n \n  handleCityChange = e => {\n    this.setState({\n      value: e.target.value\n    })\n  }\n\n  handleCitySubmit = e => {\n    e.preventDefault()\n    console.log('DziaÅ‚a');\n    const API = `http://api.openweathermap.org/data/2.5/weather?q=${this.state.value}&appid=${APIKey}&units=metric`\n    \n    fetch(API)\n      .then(response => {\n        if(response.ok) {\n          return response\n        }\n        throw Error(\"Something went wrong...\")\n      })\n      .then(response => response.json())\n      .then(data => {\n        const date = new Date().toLocaleString()\n        this.setState(prevState => ({\n        error: false,\n        date: date,\n        sunrise: data.sys.sunrise,\n        sunset: data.sys.sunset,\n        temp: data.main.temp,\n        pressure: data.main.pressure,\n        wind: data.wind.speed,\n        city: prevState.value,\n      }))})\n      .catch(error => {\n        console.log(error)\n        this.setState( state => ({\n          error: true,\n          city: state.value\n        }))\n      }\n      )\n\n  }\n  \n  render() {\n  return (\n    <div className=\"App\">\n      <Form value={this.state.value} change={this.handleCityChange} submit={this.handleCitySubmit}/>\n      <Result \n        weather = {this.state}\n      />\n    </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}